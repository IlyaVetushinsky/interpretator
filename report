Терминалы не используются в грамматике

   END
   PROC
   WHILE
   GOTO
   NP
   MF
   MB
   MR
   ML
   TP


Состояние 21 конфликты: 1 сдвига/вывода
Состояние 32 конфликты: 1 сдвига/вывода
Состояние 61 конфликты: 1 сдвига/вывода


Грамматика

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | %empty

    4 stmt: '\n'
    5     | nexpr '\n'
    6     | lexpr '\n'
    7     | PRINT nexpr '\n'
    8     | PRINT lexpr '\n'
    9     | nvariable AS nexpr '\n'
   10     | lvariable AS lexpr '\n'
   11     | '(' lexpr ')' stmt
   12     | '{' stmt_list '}'
   13     | LABEL stmt
   14     | '[' lexpr ']' LABEL '\n'
   15     | '[' lexpr ']' PLS LABEL '\n'

   16 stmt_list: stmt
   17          | stmt_list stmt

   18 nexpr: integ
   19      | nvariable
   20      | '(' nexpr ')'

   21 nvariable: INTVAR
   22          | narr
   23          | INC nvariable
   24          | DEC nvariable
   25          | nvariable EQ integ

   26 narr: INTVAR ':' nexpr
   27     | narr ';' nexpr

   28 integ: INTEGER
   29      | '-' integ

   30 lexpr: bool
   31      | lvariable
   32      | PARR lexpr lexpr
   33      | '(' lexpr ')'

   34 lvariable: LOGVAR
   35          | larr
   36          | lvariable EQ bool

   37 larr: LOGVAR ':' nexpr
   38     | larr ';' nexpr

   39 bool: LOGIC


Терминальные символы с правилами, в которых они появляются

$end (0) 0
'\n' (10) 4 5 6 7 8 9 10 14 15
'(' (40) 11 20 33
')' (41) 11 20 33
'-' (45) 29
':' (58) 26 37
';' (59) 27 38
'[' (91) 14 15
']' (93) 14 15
'{' (123) 12
'}' (125) 12
error (256)
END (258)
INTEGER (259) 28
LOGIC (260) 39
LOGVAR (261) 34 37
INTVAR (262) 21 26
LABEL (263) 13 14 15
PROC (264)
WHILE (265)
PRINT (266) 7 8
GOTO (267)
PLS (268) 15
NP (269)
MF (270)
MB (271)
MR (272)
ML (273)
TP (274)
AS (275) 9 10
EQ (276) 25 36
INC (277) 23
DEC (278) 24
PARR (279) 32
UMINUS (280)


Нетерминальные символы с правилами, в которых они появляются

$accept (36)
    налево: 0
program (37)
    налево: 1, направо: 0
function (38)
    налево: 2 3, направо: 1 2
stmt (39)
    налево: 4 5 6 7 8 9 10 11 12 13 14 15, направо: 2
    11 13 16 17
stmt_list (40)
    налево: 16 17, направо: 12 17
nexpr (41)
    налево: 18 19 20, направо: 5 7 9 20 26 27 37 38
nvariable (42)
    налево: 21 22 23 24 25, направо: 9 19 23 24 25
narr (43)
    налево: 26 27, направо: 22 27
integ (44)
    налево: 28 29, направо: 18 25 29
lexpr (45)
    налево: 30 31 32 33, направо: 6 8 10 11 14 15 32 33
lvariable (46)
    налево: 34 35 36, направо: 10 31 36
larr (47)
    налево: 37 38, направо: 35 38
bool (48)
    налево: 39, направо: 30 36


State 0

    0 $accept: . program $end
    1 program: . function
    2 function: . function stmt
    3         | . %empty

    $default  вывод с использованием правила 3 (function)

    program   переход в состояние 1
    function  переход в состояние 2


State 1

    0 $accept: program . $end

    $end  сдвиг, и переход в состояние 3


State 2

    1 program: function .  [$end]
    2 function: function . stmt
    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nvariable AS nexpr '\n'
   10     | . lvariable AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    $default  вывод с использованием правила 1 (program)

    stmt       переход в состояние 18
    nexpr      переход в состояние 19
    nvariable  переход в состояние 20
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 23
    lvariable  переход в состояние 24
    larr       переход в состояние 25
    bool       переход в состояние 26


State 3

    0 $accept: program $end .

    $default  принять


State 4

   28 integ: INTEGER .

    $default  вывод с использованием правила 28 (integ)


State 5

   39 bool: LOGIC .

    $default  вывод с использованием правила 39 (bool)


State 6

   34 lvariable: LOGVAR .  [LOGIC, LOGVAR, AS, EQ, PARR, '\n', '(', ')', ']']
   37 larr: LOGVAR . ':' nexpr

    ':'  сдвиг, и переход в состояние 27

    $default  вывод с использованием правила 34 (lvariable)


State 7

   21 nvariable: INTVAR .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   26 narr: INTVAR . ':' nexpr

    ':'  сдвиг, и переход в состояние 28

    $default  вывод с использованием правила 21 (nvariable)


State 8

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nvariable AS nexpr '\n'
   10     | . lvariable AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   13     | LABEL . stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 29
    nexpr      переход в состояние 19
    nvariable  переход в состояние 20
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 23
    lvariable  переход в состояние 24
    larr       переход в состояние 25
    bool       переход в состояние 26


State 9

    7 stmt: PRINT . nexpr '\n'
    8     | PRINT . lexpr '\n'
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 30
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 31
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 33
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 10

   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   23          | INC . nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr

    INTVAR  сдвиг, и переход в состояние 7
    INC     сдвиг, и переход в состояние 10
    DEC     сдвиг, и переход в состояние 11

    nvariable  переход в состояние 35
    narr       переход в состояние 21


State 11

   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   24          | DEC . nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr

    INTVAR  сдвиг, и переход в состояние 7
    INC     сдвиг, и переход в состояние 10
    DEC     сдвиг, и переход в состояние 11

    nvariable  переход в состояние 36
    narr       переход в состояние 21


State 12

   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   32      | PARR . lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 37

    lexpr      переход в состояние 38
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 13

    4 stmt: '\n' .

    $default  вывод с использованием правила 4 (stmt)


State 14

   11 stmt: '(' . lexpr ')' stmt
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   20      | '(' . nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   33      | '(' . lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 30
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 39
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 40
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 15

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nvariable AS nexpr '\n'
   10     | . lvariable AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   12     | '{' . stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   16 stmt_list: . stmt
   17          | . stmt_list stmt
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 41
    stmt_list  переход в состояние 42
    nexpr      переход в состояние 19
    nvariable  переход в состояние 20
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 23
    lvariable  переход в состояние 24
    larr       переход в состояние 25
    bool       переход в состояние 26


State 16

   14 stmt: '[' . lexpr ']' LABEL '\n'
   15     | '[' . lexpr ']' PLS LABEL '\n'
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 37

    lexpr      переход в состояние 43
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 17

   28 integ: . INTEGER
   29      | . '-' integ
   29      | '-' . integ

    INTEGER  сдвиг, и переход в состояние 4
    '-'      сдвиг, и переход в состояние 17

    integ  переход в состояние 44


State 18

    2 function: function stmt .

    $default  вывод с использованием правила 2 (function)


State 19

    5 stmt: nexpr . '\n'

    '\n'  сдвиг, и переход в состояние 45


State 20

    9 stmt: nvariable . AS nexpr '\n'
   19 nexpr: nvariable .  ['\n']
   25 nvariable: nvariable . EQ integ

    AS  сдвиг, и переход в состояние 46
    EQ  сдвиг, и переход в состояние 47

    $default  вывод с использованием правила 19 (nexpr)


State 21

   22 nvariable: narr .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   27 narr: narr . ';' nexpr

    ';'  сдвиг, и переход в состояние 48

    ';'       [вывод с использованием правила 22 (nvariable)]
    $default  вывод с использованием правила 22 (nvariable)


State 22

   18 nexpr: integ .

    $default  вывод с использованием правила 18 (nexpr)


State 23

    6 stmt: lexpr . '\n'

    '\n'  сдвиг, и переход в состояние 49


State 24

   10 stmt: lvariable . AS lexpr '\n'
   31 lexpr: lvariable .  ['\n']
   36 lvariable: lvariable . EQ bool

    AS  сдвиг, и переход в состояние 50
    EQ  сдвиг, и переход в состояние 51

    $default  вывод с использованием правила 31 (lexpr)


State 25

   35 lvariable: larr .  [LOGIC, LOGVAR, AS, EQ, PARR, '\n', '(', ')', ']']
   38 larr: larr . ';' nexpr

    ';'  сдвиг, и переход в состояние 52

    $default  вывод с использованием правила 35 (lvariable)


State 26

   30 lexpr: bool .

    $default  вывод с использованием правила 30 (lexpr)


State 27

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   37 larr: LOGVAR ':' . nexpr

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 54
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 28

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   26     | INTVAR ':' . nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 55
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 29

   13 stmt: LABEL stmt .

    $default  вывод с использованием правила 13 (stmt)


State 30

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   20      | '(' . nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   33      | '(' . lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 30
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 39
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 56
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 31

    7 stmt: PRINT nexpr . '\n'

    '\n'  сдвиг, и переход в состояние 57


State 32

   19 nexpr: nvariable .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   25 nvariable: nvariable . EQ integ

    EQ  сдвиг, и переход в состояние 47

    EQ        [вывод с использованием правила 19 (nexpr)]
    $default  вывод с использованием правила 19 (nexpr)


State 33

    8 stmt: PRINT lexpr . '\n'

    '\n'  сдвиг, и переход в состояние 58


State 34

   31 lexpr: lvariable .  [LOGIC, LOGVAR, PARR, '\n', '(', ')', ']']
   36 lvariable: lvariable . EQ bool

    EQ  сдвиг, и переход в состояние 51

    $default  вывод с использованием правила 31 (lexpr)


State 35

   23 nvariable: INC nvariable .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   25          | nvariable . EQ integ

    $default  вывод с использованием правила 23 (nvariable)

    Конфликт между правилом 23 и лексемой EQ разрешен выводом (EQ < INC).


State 36

   24 nvariable: DEC nvariable .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   25          | nvariable . EQ integ

    $default  вывод с использованием правила 24 (nvariable)

    Конфликт между правилом 24 и лексемой EQ разрешен выводом (EQ < DEC).


State 37

   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   33      | '(' . lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 37

    lexpr      переход в состояние 56
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 38

   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   32      | PARR lexpr . lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 37

    lexpr      переход в состояние 59
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 39

   20 nexpr: '(' nexpr . ')'

    ')'  сдвиг, и переход в состояние 60


State 40

   11 stmt: '(' lexpr . ')' stmt
   33 lexpr: '(' lexpr . ')'

    ')'  сдвиг, и переход в состояние 61


State 41

   16 stmt_list: stmt .

    $default  вывод с использованием правила 16 (stmt_list)


State 42

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nvariable AS nexpr '\n'
   10     | . lvariable AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   12     | '{' stmt_list . '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   17 stmt_list: stmt_list . stmt
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '}'      сдвиг, и переход в состояние 62
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 63
    nexpr      переход в состояние 19
    nvariable  переход в состояние 20
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 23
    lvariable  переход в состояние 24
    larr       переход в состояние 25
    bool       переход в состояние 26


State 43

   14 stmt: '[' lexpr . ']' LABEL '\n'
   15     | '[' lexpr . ']' PLS LABEL '\n'

    ']'  сдвиг, и переход в состояние 64


State 44

   29 integ: '-' integ .

    $default  вывод с использованием правила 29 (integ)


State 45

    5 stmt: nexpr '\n' .

    $default  вывод с использованием правила 5 (stmt)


State 46

    9 stmt: nvariable AS . nexpr '\n'
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 65
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 47

   25 nvariable: nvariable EQ . integ
   28 integ: . INTEGER
   29      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    '-'      сдвиг, и переход в состояние 17

    integ  переход в состояние 66


State 48

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   27     | narr ';' . nexpr
   28 integ: . INTEGER
   29      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 67
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 49

    6 stmt: lexpr '\n' .

    $default  вывод с использованием правила 6 (stmt)


State 50

   10 stmt: lvariable AS . lexpr '\n'
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 37

    lexpr      переход в состояние 68
    lvariable  переход в состояние 34
    larr       переход в состояние 25
    bool       переход в состояние 26


State 51

   36 lvariable: lvariable EQ . bool
   39 bool: . LOGIC

    LOGIC  сдвиг, и переход в состояние 5

    bool  переход в состояние 69


State 52

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   38 larr: larr ';' . nexpr

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 70
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 53

   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   20      | '(' . nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 53
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 39
    nvariable  переход в состояние 32
    narr       переход в состояние 21
    integ      переход в состояние 22


State 54

   37 larr: LOGVAR ':' nexpr .

    $default  вывод с использованием правила 37 (larr)


State 55

   26 narr: INTVAR ':' nexpr .

    $default  вывод с использованием правила 26 (narr)


State 56

   33 lexpr: '(' lexpr . ')'

    ')'  сдвиг, и переход в состояние 71


State 57

    7 stmt: PRINT nexpr '\n' .

    $default  вывод с использованием правила 7 (stmt)


State 58

    8 stmt: PRINT lexpr '\n' .

    $default  вывод с использованием правила 8 (stmt)


State 59

   32 lexpr: PARR lexpr lexpr .

    $default  вывод с использованием правила 32 (lexpr)


State 60

   20 nexpr: '(' nexpr ')' .

    $default  вывод с использованием правила 20 (nexpr)


State 61

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nvariable AS nexpr '\n'
   10     | . lvariable AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   11     | '(' lexpr ')' . stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nvariable
   20      | . '(' nexpr ')'
   21 nvariable: . INTVAR
   22          | . narr
   23          | . INC nvariable
   24          | . DEC nvariable
   25          | . nvariable EQ integ
   26 narr: . INTVAR ':' nexpr
   27     | . narr ';' nexpr
   28 integ: . INTEGER
   29      | . '-' integ
   30 lexpr: . bool
   31      | . lvariable
   32      | . PARR lexpr lexpr
   33      | . '(' lexpr ')'
   33      | '(' lexpr ')' .  ['\n']
   34 lvariable: . LOGVAR
   35          | . larr
   36          | . lvariable EQ bool
   37 larr: . LOGVAR ':' nexpr
   38     | . larr ';' nexpr
   39 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    '\n'  [вывод с использованием правила 33 (lexpr)]

    stmt       переход в состояние 72
    nexpr      переход в состояние 19
    nvariable  переход в состояние 20
    narr       переход в состояние 21
    integ      переход в состояние 22
    lexpr      переход в состояние 23
    lvariable  переход в состояние 24
    larr       переход в состояние 25
    bool       переход в состояние 26


State 62

   12 stmt: '{' stmt_list '}' .

    $default  вывод с использованием правила 12 (stmt)


State 63

   17 stmt_list: stmt_list stmt .

    $default  вывод с использованием правила 17 (stmt_list)


State 64

   14 stmt: '[' lexpr ']' . LABEL '\n'
   15     | '[' lexpr ']' . PLS LABEL '\n'

    LABEL  сдвиг, и переход в состояние 73
    PLS    сдвиг, и переход в состояние 74


State 65

    9 stmt: nvariable AS nexpr . '\n'

    '\n'  сдвиг, и переход в состояние 75


State 66

   25 nvariable: nvariable EQ integ .

    $default  вывод с использованием правила 25 (nvariable)


State 67

   27 narr: narr ';' nexpr .

    $default  вывод с использованием правила 27 (narr)


State 68

   10 stmt: lvariable AS lexpr . '\n'

    '\n'  сдвиг, и переход в состояние 76


State 69

   36 lvariable: lvariable EQ bool .

    $default  вывод с использованием правила 36 (lvariable)


State 70

   38 larr: larr ';' nexpr .

    $default  вывод с использованием правила 38 (larr)


State 71

   33 lexpr: '(' lexpr ')' .

    $default  вывод с использованием правила 33 (lexpr)


State 72

   11 stmt: '(' lexpr ')' stmt .

    $default  вывод с использованием правила 11 (stmt)


State 73

   14 stmt: '[' lexpr ']' LABEL . '\n'

    '\n'  сдвиг, и переход в состояние 77


State 74

   15 stmt: '[' lexpr ']' PLS . LABEL '\n'

    LABEL  сдвиг, и переход в состояние 78


State 75

    9 stmt: nvariable AS nexpr '\n' .

    $default  вывод с использованием правила 9 (stmt)


State 76

   10 stmt: lvariable AS lexpr '\n' .

    $default  вывод с использованием правила 10 (stmt)


State 77

   14 stmt: '[' lexpr ']' LABEL '\n' .

    $default  вывод с использованием правила 14 (stmt)


State 78

   15 stmt: '[' lexpr ']' PLS LABEL . '\n'

    '\n'  сдвиг, и переход в состояние 79


State 79

   15 stmt: '[' lexpr ']' PLS LABEL '\n' .

    $default  вывод с использованием правила 15 (stmt)
