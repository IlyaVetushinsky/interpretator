Терминалы не используются в грамматике

   END
   PROC
   WHILE
   GOTO
   NP
   MF
   MB
   MR
   ML
   TP


Состояние 57 конфликты: 1 сдвига/вывода


Грамматика

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | %empty

    4 stmt: '\n'
    5     | nexpr '\n'
    6     | lexpr '\n'
    7     | PRINT nexpr '\n'
    8     | PRINT lexpr '\n'
    9     | nexpr AS nexpr '\n'
   10     | lexpr AS lexpr '\n'
   11     | '(' lexpr ')' stmt
   12     | '{' stmt_list '}'
   13     | LABEL stmt
   14     | '[' lexpr ']' LABEL '\n'
   15     | '[' lexpr ']' PLS LABEL '\n'

   16 stmt_list: stmt
   17          | stmt_list stmt

   18 nexpr: integ
   19      | nexpr EQ nexpr
   20      | INTVAR
   21      | INC nexpr
   22      | DEC nexpr
   23      | INTVAR ':' nexpr
   24      | nexpr ';' nexpr
   25      | '(' nexpr ')'

   26 integ: INTEGER
   27      | '-' integ

   28 lexpr: bool
   29      | lvariable
   30      | PARR lexpr lexpr
   31      | lvariable EQ bool
   32      | '(' lexpr ')'

   33 lvariable: LOGVAR
   34          | larr

   35 larr: LOGVAR ':' nexpr
   36     | larr ';' nexpr

   37 bool: LOGIC


Терминальные символы с правилами, в которых они появляются

$end (0) 0
'\n' (10) 4 5 6 7 8 9 10 14 15
'(' (40) 11 25 32
')' (41) 11 25 32
'-' (45) 27
':' (58) 23 35
';' (59) 24 36
'[' (91) 14 15
']' (93) 14 15
'{' (123) 12
'}' (125) 12
error (256)
END (258)
INTEGER (259) 26
LOGIC (260) 37
LOGVAR (261) 33 35
INTVAR (262) 20 23
LABEL (263) 13 14 15
PROC (264)
WHILE (265)
PRINT (266) 7 8
GOTO (267)
PLS (268) 15
NP (269)
MF (270)
MB (271)
MR (272)
ML (273)
TP (274)
AS (275) 9 10
EQ (276) 19 31
INC (277) 21
DEC (278) 22
PARR (279) 30
UMINUS (280)


Нетерминальные символы с правилами, в которых они появляются

$accept (36)
    налево: 0
program (37)
    налево: 1, направо: 0
function (38)
    налево: 2 3, направо: 1 2
stmt (39)
    налево: 4 5 6 7 8 9 10 11 12 13 14 15, направо: 2
    11 13 16 17
stmt_list (40)
    налево: 16 17, направо: 12 17
nexpr (41)
    налево: 18 19 20 21 22 23 24 25, направо: 5 7 9 19
    21 22 23 24 25 35 36
integ (42)
    налево: 26 27, направо: 18 27
lexpr (43)
    налево: 28 29 30 31 32, направо: 6 8 10 11 14 15 30
    32
lvariable (44)
    налево: 33 34, направо: 29 31
larr (45)
    налево: 35 36, направо: 34 36
bool (46)
    налево: 37, направо: 28 31


State 0

    0 $accept: . program $end
    1 program: . function
    2 function: . function stmt
    3         | . %empty

    $default  вывод с использованием правила 3 (function)

    program   переход в состояние 1
    function  переход в состояние 2


State 1

    0 $accept: program . $end

    $end  сдвиг, и переход в состояние 3


State 2

    1 program: function .  [$end]
    2 function: function . stmt
    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nexpr AS nexpr '\n'
   10     | . lexpr AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    $default  вывод с использованием правила 1 (program)

    stmt       переход в состояние 18
    nexpr      переход в состояние 19
    integ      переход в состояние 20
    lexpr      переход в состояние 21
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 3

    0 $accept: program $end .

    $default  принять


State 4

   26 integ: INTEGER .

    $default  вывод с использованием правила 26 (integ)


State 5

   37 bool: LOGIC .

    $default  вывод с использованием правила 37 (bool)


State 6

   33 lvariable: LOGVAR .  [LOGIC, LOGVAR, AS, EQ, PARR, '\n', '(', ')', ']']
   35 larr: LOGVAR . ':' nexpr

    ':'  сдвиг, и переход в состояние 25

    $default  вывод с использованием правила 33 (lvariable)


State 7

   20 nexpr: INTVAR .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   23      | INTVAR . ':' nexpr

    ':'  сдвиг, и переход в состояние 26

    $default  вывод с использованием правила 20 (nexpr)


State 8

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nexpr AS nexpr '\n'
   10     | . lexpr AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   13     | LABEL . stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 27
    nexpr      переход в состояние 19
    integ      переход в состояние 20
    lexpr      переход в состояние 21
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 9

    7 stmt: PRINT . nexpr '\n'
    8     | PRINT . lexpr '\n'
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 28
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 29
    integ      переход в состояние 20
    lexpr      переход в состояние 30
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 10

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   21      | INC . nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 32
    integ  переход в состояние 20


State 11

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   22      | DEC . nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 33
    integ  переход в состояние 20


State 12

   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   30      | PARR . lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 34

    lexpr      переход в состояние 35
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 13

    4 stmt: '\n' .

    $default  вывод с использованием правила 4 (stmt)


State 14

   11 stmt: '(' . lexpr ')' stmt
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   25      | '(' . nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   32      | '(' . lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 28
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 36
    integ      переход в состояние 20
    lexpr      переход в состояние 37
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 15

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nexpr AS nexpr '\n'
   10     | . lexpr AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   12     | '{' . stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   16 stmt_list: . stmt
   17          | . stmt_list stmt
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 38
    stmt_list  переход в состояние 39
    nexpr      переход в состояние 19
    integ      переход в состояние 20
    lexpr      переход в состояние 21
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 16

   14 stmt: '[' . lexpr ']' LABEL '\n'
   15     | '[' . lexpr ']' PLS LABEL '\n'
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 34

    lexpr      переход в состояние 40
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 17

   26 integ: . INTEGER
   27      | . '-' integ
   27      | '-' . integ

    INTEGER  сдвиг, и переход в состояние 4
    '-'      сдвиг, и переход в состояние 17

    integ  переход в состояние 41


State 18

    2 function: function stmt .

    $default  вывод с использованием правила 2 (function)


State 19

    5 stmt: nexpr . '\n'
    9     | nexpr . AS nexpr '\n'
   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr

    AS    сдвиг, и переход в состояние 42
    ';'   сдвиг, и переход в состояние 43
    EQ    сдвиг, и переход в состояние 44
    '\n'  сдвиг, и переход в состояние 45


State 20

   18 nexpr: integ .

    $default  вывод с использованием правила 18 (nexpr)


State 21

    6 stmt: lexpr . '\n'
   10     | lexpr . AS lexpr '\n'

    AS    сдвиг, и переход в состояние 46
    '\n'  сдвиг, и переход в состояние 47


State 22

   29 lexpr: lvariable .  [LOGIC, LOGVAR, AS, PARR, '\n', '(', ')', ']']
   31      | lvariable . EQ bool

    EQ  сдвиг, и переход в состояние 48

    $default  вывод с использованием правила 29 (lexpr)


State 23

   34 lvariable: larr .  [LOGIC, LOGVAR, AS, EQ, PARR, '\n', '(', ')', ']']
   36 larr: larr . ';' nexpr

    ';'  сдвиг, и переход в состояние 49

    $default  вывод с использованием правила 34 (lvariable)


State 24

   28 lexpr: bool .

    $default  вывод с использованием правила 28 (lexpr)


State 25

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   35 larr: LOGVAR ':' . nexpr

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 50
    integ  переход в состояние 20


State 26

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   23      | INTVAR ':' . nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 51
    integ  переход в состояние 20


State 27

   13 stmt: LABEL stmt .

    $default  вывод с использованием правила 13 (stmt)


State 28

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   25      | '(' . nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   32      | '(' . lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '('      сдвиг, и переход в состояние 28
    '-'      сдвиг, и переход в состояние 17

    nexpr      переход в состояние 36
    integ      переход в состояние 20
    lexpr      переход в состояние 52
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 29

    7 stmt: PRINT nexpr . '\n'
   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr

    ';'   сдвиг, и переход в состояние 43
    EQ    сдвиг, и переход в состояние 44
    '\n'  сдвиг, и переход в состояние 53


State 30

    8 stmt: PRINT lexpr . '\n'

    '\n'  сдвиг, и переход в состояние 54


State 31

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   25      | '(' . nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 36
    integ  переход в состояние 20


State 32

   19 nexpr: nexpr . EQ nexpr
   21      | INC nexpr .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   24      | nexpr . ';' nexpr

    $default  вывод с использованием правила 21 (nexpr)

    Конфликт между правилом 21 и лексемой ';' разрешен выводом (';' < INC).
    Конфликт между правилом 21 и лексемой EQ разрешен выводом (EQ < INC).


State 33

   19 nexpr: nexpr . EQ nexpr
   22      | DEC nexpr .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   24      | nexpr . ';' nexpr

    $default  вывод с использованием правила 22 (nexpr)

    Конфликт между правилом 22 и лексемой ';' разрешен выводом (';' < DEC).
    Конфликт между правилом 22 и лексемой EQ разрешен выводом (EQ < DEC).


State 34

   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   32      | '(' . lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 34

    lexpr      переход в состояние 52
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 35

   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   30      | PARR lexpr . lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 34

    lexpr      переход в состояние 55
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 36

   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr
   25      | '(' nexpr . ')'

    ';'  сдвиг, и переход в состояние 43
    EQ   сдвиг, и переход в состояние 44
    ')'  сдвиг, и переход в состояние 56


State 37

   11 stmt: '(' lexpr . ')' stmt
   32 lexpr: '(' lexpr . ')'

    ')'  сдвиг, и переход в состояние 57


State 38

   16 stmt_list: stmt .

    $default  вывод с использованием правила 16 (stmt_list)


State 39

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nexpr AS nexpr '\n'
   10     | . lexpr AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   12     | . '{' stmt_list '}'
   12     | '{' stmt_list . '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   17 stmt_list: stmt_list . stmt
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '}'      сдвиг, и переход в состояние 58
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    stmt       переход в состояние 59
    nexpr      переход в состояние 19
    integ      переход в состояние 20
    lexpr      переход в состояние 21
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 40

   14 stmt: '[' lexpr . ']' LABEL '\n'
   15     | '[' lexpr . ']' PLS LABEL '\n'

    ']'  сдвиг, и переход в состояние 60


State 41

   27 integ: '-' integ .

    $default  вывод с использованием правила 27 (integ)


State 42

    9 stmt: nexpr AS . nexpr '\n'
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 61
    integ  переход в состояние 20


State 43

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   24      | nexpr ';' . nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 62
    integ  переход в состояние 20


State 44

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   19      | nexpr EQ . nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 63
    integ  переход в состояние 20


State 45

    5 stmt: nexpr '\n' .

    $default  вывод с использованием правила 5 (stmt)


State 46

   10 stmt: lexpr AS . lexpr '\n'
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    LOGIC   сдвиг, и переход в состояние 5
    LOGVAR  сдвиг, и переход в состояние 6
    PARR    сдвиг, и переход в состояние 12
    '('     сдвиг, и переход в состояние 34

    lexpr      переход в состояние 64
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 47

    6 stmt: lexpr '\n' .

    $default  вывод с использованием правила 6 (stmt)


State 48

   31 lexpr: lvariable EQ . bool
   37 bool: . LOGIC

    LOGIC  сдвиг, и переход в состояние 5

    bool  переход в состояние 65


State 49

   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   36 larr: larr ';' . nexpr

    INTEGER  сдвиг, и переход в состояние 4
    INTVAR   сдвиг, и переход в состояние 7
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    '('      сдвиг, и переход в состояние 31
    '-'      сдвиг, и переход в состояние 17

    nexpr  переход в состояние 66
    integ  переход в состояние 20


State 50

   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr
   35 larr: LOGVAR ':' nexpr .  [LOGIC, LOGVAR, AS, ';', PARR, '\n', '(', ')', ']']

    EQ  сдвиг, и переход в состояние 44

    $default  вывод с использованием правила 35 (larr)

    Конфликт между правилом 35 и лексемой ';' разрешен выводом (';' < ':').
    Конфликт между правилом 35 и лексемой EQ разрешен сдвигом (':' < EQ).


State 51

   19 nexpr: nexpr . EQ nexpr
   23      | INTVAR ':' nexpr .  [LOGIC, LOGVAR, AS, ';', PARR, '\n', '(', ')', ']']
   24      | nexpr . ';' nexpr

    EQ  сдвиг, и переход в состояние 44

    $default  вывод с использованием правила 23 (nexpr)

    Конфликт между правилом 23 и лексемой ';' разрешен выводом (';' < ':').
    Конфликт между правилом 23 и лексемой EQ разрешен сдвигом (':' < EQ).


State 52

   32 lexpr: '(' lexpr . ')'

    ')'  сдвиг, и переход в состояние 67


State 53

    7 stmt: PRINT nexpr '\n' .

    $default  вывод с использованием правила 7 (stmt)


State 54

    8 stmt: PRINT lexpr '\n' .

    $default  вывод с использованием правила 8 (stmt)


State 55

   30 lexpr: PARR lexpr lexpr .

    $default  вывод с использованием правила 30 (lexpr)


State 56

   25 nexpr: '(' nexpr ')' .

    $default  вывод с использованием правила 25 (nexpr)


State 57

    4 stmt: . '\n'
    5     | . nexpr '\n'
    6     | . lexpr '\n'
    7     | . PRINT nexpr '\n'
    8     | . PRINT lexpr '\n'
    9     | . nexpr AS nexpr '\n'
   10     | . lexpr AS lexpr '\n'
   11     | . '(' lexpr ')' stmt
   11     | '(' lexpr ')' . stmt
   12     | . '{' stmt_list '}'
   13     | . LABEL stmt
   14     | . '[' lexpr ']' LABEL '\n'
   15     | . '[' lexpr ']' PLS LABEL '\n'
   18 nexpr: . integ
   19      | . nexpr EQ nexpr
   20      | . INTVAR
   21      | . INC nexpr
   22      | . DEC nexpr
   23      | . INTVAR ':' nexpr
   24      | . nexpr ';' nexpr
   25      | . '(' nexpr ')'
   26 integ: . INTEGER
   27      | . '-' integ
   28 lexpr: . bool
   29      | . lvariable
   30      | . PARR lexpr lexpr
   31      | . lvariable EQ bool
   32      | . '(' lexpr ')'
   32      | '(' lexpr ')' .  [AS, '\n']
   33 lvariable: . LOGVAR
   34          | . larr
   35 larr: . LOGVAR ':' nexpr
   36     | . larr ';' nexpr
   37 bool: . LOGIC

    INTEGER  сдвиг, и переход в состояние 4
    LOGIC    сдвиг, и переход в состояние 5
    LOGVAR   сдвиг, и переход в состояние 6
    INTVAR   сдвиг, и переход в состояние 7
    LABEL    сдвиг, и переход в состояние 8
    PRINT    сдвиг, и переход в состояние 9
    INC      сдвиг, и переход в состояние 10
    DEC      сдвиг, и переход в состояние 11
    PARR     сдвиг, и переход в состояние 12
    '\n'     сдвиг, и переход в состояние 13
    '('      сдвиг, и переход в состояние 14
    '{'      сдвиг, и переход в состояние 15
    '['      сдвиг, и переход в состояние 16
    '-'      сдвиг, и переход в состояние 17

    '\n'      [вывод с использованием правила 32 (lexpr)]
    $default  вывод с использованием правила 32 (lexpr)

    stmt       переход в состояние 68
    nexpr      переход в состояние 19
    integ      переход в состояние 20
    lexpr      переход в состояние 21
    lvariable  переход в состояние 22
    larr       переход в состояние 23
    bool       переход в состояние 24


State 58

   12 stmt: '{' stmt_list '}' .

    $default  вывод с использованием правила 12 (stmt)


State 59

   17 stmt_list: stmt_list stmt .

    $default  вывод с использованием правила 17 (stmt_list)


State 60

   14 stmt: '[' lexpr ']' . LABEL '\n'
   15     | '[' lexpr ']' . PLS LABEL '\n'

    LABEL  сдвиг, и переход в состояние 69
    PLS    сдвиг, и переход в состояние 70


State 61

    9 stmt: nexpr AS nexpr . '\n'
   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr

    ';'   сдвиг, и переход в состояние 43
    EQ    сдвиг, и переход в состояние 44
    '\n'  сдвиг, и переход в состояние 71


State 62

   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr
   24      | nexpr ';' nexpr .  [LOGIC, LOGVAR, AS, ';', PARR, '\n', '(', ')', ']']

    EQ  сдвиг, и переход в состояние 44

    $default  вывод с использованием правила 24 (nexpr)

    Конфликт между правилом 24 и лексемой ';' разрешен выводом (%left ';').
    Конфликт между правилом 24 и лексемой EQ разрешен сдвигом (';' < EQ).


State 63

   19 nexpr: nexpr . EQ nexpr
   19      | nexpr EQ nexpr .  [LOGIC, LOGVAR, AS, ';', EQ, PARR, '\n', '(', ')', ']']
   24      | nexpr . ';' nexpr

    $default  вывод с использованием правила 19 (nexpr)

    Конфликт между правилом 19 и лексемой ';' разрешен выводом (';' < EQ).
    Конфликт между правилом 19 и лексемой EQ разрешен выводом (%left EQ).


State 64

   10 stmt: lexpr AS lexpr . '\n'

    '\n'  сдвиг, и переход в состояние 72


State 65

   31 lexpr: lvariable EQ bool .

    $default  вывод с использованием правила 31 (lexpr)


State 66

   19 nexpr: nexpr . EQ nexpr
   24      | nexpr . ';' nexpr
   36 larr: larr ';' nexpr .  [LOGIC, LOGVAR, AS, ';', PARR, '\n', '(', ')', ']']

    EQ  сдвиг, и переход в состояние 44

    $default  вывод с использованием правила 36 (larr)

    Конфликт между правилом 36 и лексемой ';' разрешен выводом (%left ';').
    Конфликт между правилом 36 и лексемой EQ разрешен сдвигом (';' < EQ).


State 67

   32 lexpr: '(' lexpr ')' .

    $default  вывод с использованием правила 32 (lexpr)


State 68

   11 stmt: '(' lexpr ')' stmt .

    $default  вывод с использованием правила 11 (stmt)


State 69

   14 stmt: '[' lexpr ']' LABEL . '\n'

    '\n'  сдвиг, и переход в состояние 73


State 70

   15 stmt: '[' lexpr ']' PLS . LABEL '\n'

    LABEL  сдвиг, и переход в состояние 74


State 71

    9 stmt: nexpr AS nexpr '\n' .

    $default  вывод с использованием правила 9 (stmt)


State 72

   10 stmt: lexpr AS lexpr '\n' .

    $default  вывод с использованием правила 10 (stmt)


State 73

   14 stmt: '[' lexpr ']' LABEL '\n' .

    $default  вывод с использованием правила 14 (stmt)


State 74

   15 stmt: '[' lexpr ']' PLS LABEL . '\n'

    '\n'  сдвиг, и переход в состояние 75


State 75

   15 stmt: '[' lexpr ']' PLS LABEL '\n' .

    $default  вывод с использованием правила 15 (stmt)
